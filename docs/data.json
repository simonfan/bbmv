{
    "project": {
        "name": "bbmv",
        "version": "0.0.0"
    },
    "files": {
        "src/bbmv/aux/general.js": {
            "name": "src/bbmv/aux/general.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src/bbmv/aux/index.js": {
            "name": "src/bbmv/aux/index.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src/bbmv/aux/parse.js": {
            "name": "src/bbmv/aux/parse.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src/bbmv/directives/data-bind.js": {
            "name": "src/bbmv/directives/data-bind.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src/bbmv/directives/index.js": {
            "name": "src/bbmv/directives/index.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src/bbmv/directives/on.js": {
            "name": "src/bbmv/directives/on.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src/bbmv/methods/jquery/extensions/value.js": {
            "name": "src/bbmv/methods/jquery/extensions/value.js",
            "modules": {},
            "classes": {
                "jqValueSetters": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/bbmv/methods/if.js": {
            "name": "src/bbmv/methods/if.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src/bbmv/methods/pipe.js": {
            "name": "src/bbmv/methods/pipe.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src/bbmv/pipe/dest-get.js": {
            "name": "src/bbmv/pipe/dest-get.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src/bbmv/pipe/dest-set.js": {
            "name": "src/bbmv/pipe/dest-set.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src/bbmv.js": {
            "name": "src/bbmv.js",
            "modules": {
                "bbmv": 1
            },
            "classes": {},
            "fors": {},
            "namespaces": {}
        }
    },
    "modules": {
        "bbmv": {
            "name": "bbmv",
            "submodules": {},
            "classes": {
                "jqValueSetters": 1
            },
            "fors": {},
            "namespaces": {},
            "tag": "module",
            "file": "src/bbmv/methods/jquery/extensions/value.js",
            "line": 68,
            "description": "The modeld is the object that links together $els and models."
        }
    },
    "classes": {
        "jqValueSetters": {
            "name": "jqValueSetters",
            "shortname": "jqValueSetters",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "bbmv",
            "file": "src/bbmv/methods/jquery/extensions/value.js",
            "line": 68,
            "description": "Holds the html tag jqValueSetters.",
            "static": 1
        }
    },
    "classitems": [
        {
            "file": "src/bbmv/aux/general.js",
            "line": 7,
            "description": "Copied from Epeli's underscore.string \"camelize\"\nhttps://github.com/epeli/underscore.string/blob/master/lib/underscore.string.js",
            "params": [
                {
                    "name": "str",
                    "description": "[description]",
                    "type": "[type]"
                }
            ],
            "return": {
                "description": "[description]",
                "type": "[type]"
            },
            "class": "jqValueSetters"
        },
        {
            "file": "src/bbmv/aux/general.js",
            "line": 20,
            "description": "Adapted from Epeli's underscore.string \"trim\"\nhttps://github.com/epeli/underscore.string/blob/master/lib/underscore.string.js",
            "params": [
                {
                    "name": "str",
                    "description": "[description]",
                    "type": "[type]"
                },
                {
                    "name": "characters",
                    "description": "[description]",
                    "type": "[type]"
                }
            ],
            "return": {
                "description": "[description]",
                "type": "[type]"
            },
            "class": "jqValueSetters"
        },
        {
            "file": "src/bbmv/aux/general.js",
            "line": 37,
            "description": "Creates a Regular Expression to capture property name.",
            "class": "jqValueSetters"
        },
        {
            "file": "src/bbmv/aux/general.js",
            "line": 49,
            "description": "Returns the string with the first letter to lowercase.",
            "class": "jqValueSetters"
        },
        {
            "file": "src/bbmv/aux/general.js",
            "line": 56,
            "description": "Returns the string with the first letter to uppercase.",
            "class": "jqValueSetters"
        },
        {
            "file": "src/bbmv/aux/index.js",
            "line": 10,
            "description": "Finds the default DOM event\nfor an $el.\nMust take an events hash as second argument.",
            "params": [
                {
                    "name": "$el",
                    "description": "[description]",
                    "type": "[type]"
                },
                {
                    "name": "eventsHash",
                    "description": "[description]",
                    "type": "[type]"
                }
            ],
            "return": {
                "description": "[description]",
                "type": "[type]"
            },
            "class": "jqValueSetters"
        },
        {
            "file": "src/bbmv/aux/parse.js",
            "line": 9,
            "description": "Cache for parsing.",
            "type": "{Object}",
            "class": "jqValueSetters"
        },
        {
            "file": "src/bbmv/aux/parse.js",
            "line": 49,
            "description": "Parses a string into methodName and args.\nExample string: 'css(background-color)'\n                'attr(href)'\n                'val'\n                'someMethod(arg1, arg2, arg3)'",
            "params": [
                {
                    "name": "str",
                    "description": "[description]",
                    "type": "[type]"
                }
            ],
            "return": {
                "description": "[description]",
                "type": "[type]"
            },
            "class": "jqValueSetters"
        },
        {
            "file": "src/bbmv/directives/data-bind.js",
            "line": 10,
            "description": "Binds the $el data to the model in\nuni-directional mode:\nfrom DOM to MODEL",
            "params": [
                {
                    "name": "$el",
                    "description": "[description]",
                    "type": "[type]"
                },
                {
                    "name": "map",
                    "description": "[description]",
                    "type": "[type]"
                }
            ],
            "return": {
                "description": "[description]",
                "type": "[type]"
            },
            "class": "jqValueSetters"
        },
        {
            "file": "src/bbmv/directives/data-bind.js",
            "line": 40,
            "description": "Binds the model data to the $el in\nuni-directional mode:\nfrom MODEL to DOM",
            "params": [
                {
                    "name": "$el",
                    "description": "[description]",
                    "type": "[type]"
                },
                {
                    "name": "map",
                    "description": "[description]",
                    "type": "[type]"
                }
            ],
            "return": {
                "description": "[description]",
                "type": "[type]"
            },
            "class": "jqValueSetters"
        },
        {
            "file": "src/bbmv/directives/data-bind.js",
            "line": 60,
            "description": "Dual way data binding.",
            "params": [
                {
                    "name": "$el",
                    "description": "[description]",
                    "type": "[type]"
                },
                {
                    "name": "map",
                    "description": "[description]",
                    "type": "[type]"
                }
            ],
            "return": {
                "description": "[description]",
                "type": "[type]"
            },
            "class": "jqValueSetters"
        },
        {
            "file": "src/bbmv/directives/data-bind.js",
            "line": 89,
            "description": "Set directive.",
            "params": [
                {
                    "name": "$el",
                    "description": "[description]",
                    "type": "[type]"
                },
                {
                    "name": "map",
                    "description": "[description]",
                    "type": "[type]"
                }
            ],
            "return": {
                "description": "[description]",
                "type": "[type]"
            },
            "class": "jqValueSetters"
        },
        {
            "file": "src/bbmv/directives/index.js",
            "line": 17,
            "description": "The directives to be exported.",
            "class": "jqValueSetters"
        },
        {
            "file": "src/bbmv/directives/on.js",
            "line": 13,
            "description": "Parses the methos string into an object\nwith name and arguments array.\n\nmethod: arg1, arg2",
            "params": [
                {
                    "name": "methodStr",
                    "description": "[description]",
                    "type": "[type]"
                }
            ],
            "return": {
                "description": "[description]",
                "type": "[type]"
            },
            "class": "jqValueSetters"
        },
        {
            "file": "src/bbmv/directives/on.js",
            "line": 38,
            "description": "Parses the event string into an object\nwith evetn name, method and arguments for the method.\n\nevent=>method: arg1, arg2",
            "params": [
                {
                    "name": "evtStr",
                    "description": "[description]",
                    "type": "[type]"
                }
            ],
            "return": {
                "description": "[description]",
                "type": "[type]"
            },
            "class": "jqValueSetters"
        },
        {
            "file": "src/bbmv/directives/on.js",
            "line": 60,
            "description": "Sets an event listener that tries to invoke\na method either on the $el or on the bbmv view instance.",
            "params": [
                {
                    "name": "view",
                    "description": "[description]",
                    "type": "[type]"
                },
                {
                    "name": "$el",
                    "description": "[description]",
                    "type": "[type]"
                },
                {
                    "name": "evtName",
                    "description": "[description]",
                    "type": "[type]"
                },
                {
                    "name": "methodStr",
                    "description": "[description]",
                    "type": "[type]"
                }
            ],
            "class": "jqValueSetters"
        },
        {
            "file": "src/bbmv/directives/on.js",
            "line": 81,
            "description": "Event directive, binds events to actions on the view.",
            "params": [
                {
                    "name": "$el",
                    "description": "[description]",
                    "type": "[type]"
                },
                {
                    "name": "evtStr_evtMap",
                    "description": "[description]",
                    "type": "[type]"
                }
            ],
            "return": {
                "description": "[description]",
                "type": "[type]"
            },
            "class": "jqValueSetters"
        },
        {
            "file": "src/bbmv/methods/jquery/extensions/value.js",
            "line": 7,
            "description": "Hash of functions that will return a value\ngiven an jquery $el.\nKeyed by tagName",
            "itemtype": "property",
            "name": "jqValueGetters",
            "access": "private",
            "tagname": "",
            "type": "Object",
            "class": "jqValueSetters"
        },
        {
            "file": "src/bbmv/methods/jquery/extensions/value.js",
            "line": 47,
            "description": "Takes a selector string and returns the value of it.",
            "itemtype": "method",
            "name": "jqValueGet",
            "params": [
                {
                    "name": "selector",
                    "description": "",
                    "type": "String"
                }
            ],
            "class": "jqValueSetters"
        },
        {
            "file": "src/bbmv/methods/jquery/extensions/value.js",
            "line": 79,
            "description": "intercept only filling for checkboxes and radios\nas the default jquery .val() method sets the checkboxes and radio input\nvalues instead of checking them (if the value is not passed in as an array)",
            "class": "jqValueSetters"
        },
        {
            "file": "src/bbmv/methods/jquery/extensions/value.js",
            "line": 106,
            "description": "Generates a filler function.",
            "itemtype": "method",
            "name": "jqValueSet",
            "params": [
                {
                    "name": "$el",
                    "description": "The element on which perform task",
                    "type": "JQuery"
                }
            ],
            "class": "jqValueSetters"
        },
        {
            "file": "src/bbmv/methods/if.js",
            "line": 49,
            "description": "Takes variable number of arguments\nEach argument before the last is a 'condition->method' pair.\nIf no '->' is found within the pair string, we assume the method is\nto be used in default cases.",
            "return": {
                "description": "[description]",
                "type": "[type]"
            },
            "class": ""
        },
        {
            "file": "src/bbmv/methods/pipe.js",
            "line": 6,
            "description": "Attempts to get the pipe id from the $dest object\nand then checks for a pipe in cache.\n\nIf no pipe is found in cache, instantiate a pipe\nset id onto $dest using the .data method\nand save pipe to cache using that id.",
            "params": [
                {
                    "name": "$dest",
                    "description": "[description]",
                    "type": "[type]"
                },
                {
                    "name": "map",
                    "description": "[description]",
                    "type": "[type]"
                },
                {
                    "name": "options",
                    "description": "[description]",
                    "type": "[type]"
                }
            ],
            "return": {
                "description": "[description]",
                "type": "[type]"
            },
            "class": ""
        },
        {
            "file": "src/bbmv/methods/pipe.js",
            "line": 58,
            "description": "Pump data.",
            "params": [
                {
                    "name": "argument",
                    "description": "[description]",
                    "type": "[type]"
                }
            ],
            "return": {
                "description": "[description]",
                "type": "[type]"
            },
            "class": ""
        },
        {
            "file": "src/bbmv/methods/pipe.js",
            "line": 74,
            "description": "Drains data from a single element",
            "params": [
                {
                    "name": "$el",
                    "description": "[description]",
                    "type": "[type]"
                }
            ],
            "return": {
                "description": "[description]",
                "type": "[type]"
            },
            "class": ""
        },
        {
            "file": "src/bbmv/pipe/dest-get.js",
            "line": 16,
            "description": "Get from the jquery object",
            "params": [
                {
                    "name": "$el",
                    "description": "[description]",
                    "type": "[type]"
                },
                {
                    "name": "dest",
                    "description": "[description]",
                    "type": "[type]"
                }
            ],
            "return": {
                "description": "[description]",
                "type": "[type]"
            },
            "class": ""
        },
        {
            "file": "src/bbmv/pipe/dest-set.js",
            "line": 12,
            "description": "[destSetSingle description]",
            "params": [
                {
                    "name": "bbmvInstance",
                    "description": "The instance of bbmv to which this pipe is\n        attached.",
                    "type": "[type]"
                },
                {
                    "name": "$el",
                    "description": "Destination element on which set the value",
                    "type": "[type]"
                },
                {
                    "name": "dest",
                    "description": "[description]",
                    "type": "[type]"
                },
                {
                    "name": "value",
                    "description": "[description]",
                    "type": "[type]"
                }
            ],
            "return": {
                "description": "[description]",
                "type": "[type]"
            },
            "class": ""
        },
        {
            "file": "src/bbmv/pipe/dest-set.js",
            "line": 63,
            "description": "Set to the jquery object",
            "params": [
                {
                    "name": "$el",
                    "description": "[description]",
                    "type": "[type]"
                },
                {
                    "name": "dest",
                    "description": "[description]",
                    "type": "[type]"
                },
                {
                    "name": "value",
                    "description": "[description]",
                    "type": "[type]"
                }
            ],
            "return": {
                "description": "[description]",
                "type": "[type]"
            },
            "class": ""
        },
        {
            "file": "src/bbmv.js",
            "line": 39,
            "description": "The attribute used to store the pipe id\nonto the $dest elements.",
            "type": "{[type]}",
            "class": "",
            "module": "bbmv"
        },
        {
            "file": "src/bbmv.js",
            "line": 64,
            "description": "Event to listen on the model.",
            "type": "{String}",
            "class": "",
            "module": "bbmv"
        },
        {
            "file": "src/bbmv.js",
            "line": 70,
            "description": "Data atttribute for the binding event name.",
            "type": "{String}",
            "class": "",
            "module": "bbmv"
        },
        {
            "file": "src/bbmv.js",
            "line": 80,
            "description": "Directive namespace\nused for bbdv.",
            "type": "{String}",
            "class": "",
            "module": "bbmv"
        },
        {
            "file": "src/bbmv.js",
            "line": 86,
            "description": "Builds the selector to get the elements to be\nin the directive view.\n\nIf the binding attribute is set, use it to build\na custom selector.\nOtherwise. use the data-prefix selector.",
            "params": [
                {
                    "name": "namespace",
                    "description": "[description]",
                    "type": "[type]"
                }
            ],
            "return": {
                "description": "[description]",
                "type": "[type]"
            },
            "class": "",
            "module": "bbmv"
        }
    ],
    "warnings": [
        {
            "message": "Missing item type\nCopied from Epeli's underscore.string \"camelize\"\nhttps://github.com/epeli/underscore.string/blob/master/lib/underscore.string.js",
            "line": " src/bbmv/aux/general.js:7"
        },
        {
            "message": "Missing item type\nAdapted from Epeli's underscore.string \"trim\"\nhttps://github.com/epeli/underscore.string/blob/master/lib/underscore.string.js",
            "line": " src/bbmv/aux/general.js:20"
        },
        {
            "message": "Missing item type\nCreates a Regular Expression to capture property name.",
            "line": " src/bbmv/aux/general.js:37"
        },
        {
            "message": "Missing item type\nReturns the string with the first letter to lowercase.",
            "line": " src/bbmv/aux/general.js:49"
        },
        {
            "message": "Missing item type\nReturns the string with the first letter to uppercase.",
            "line": " src/bbmv/aux/general.js:56"
        },
        {
            "message": "Missing item type\nFinds the default DOM event\nfor an $el.\nMust take an events hash as second argument.",
            "line": " src/bbmv/aux/index.js:10"
        },
        {
            "message": "Missing item type\nCache for parsing.",
            "line": " src/bbmv/aux/parse.js:9"
        },
        {
            "message": "Missing item type\nParses a string into methodName and args.\nExample string: 'css(background-color)'\n                'attr(href)'\n                'val'\n                'someMethod(arg1, arg2, arg3)'",
            "line": " src/bbmv/aux/parse.js:49"
        },
        {
            "message": "Missing item type\nBinds the $el data to the model in\nuni-directional mode:\nfrom DOM to MODEL",
            "line": " src/bbmv/directives/data-bind.js:10"
        },
        {
            "message": "Missing item type\nBinds the model data to the $el in\nuni-directional mode:\nfrom MODEL to DOM",
            "line": " src/bbmv/directives/data-bind.js:40"
        },
        {
            "message": "Missing item type\nDual way data binding.",
            "line": " src/bbmv/directives/data-bind.js:60"
        },
        {
            "message": "Missing item type\nSet directive.",
            "line": " src/bbmv/directives/data-bind.js:89"
        },
        {
            "message": "Missing item type\nThe directives to be exported.",
            "line": " src/bbmv/directives/index.js:17"
        },
        {
            "message": "Missing item type\nParses the methos string into an object\nwith name and arguments array.\n\nmethod: arg1, arg2",
            "line": " src/bbmv/directives/on.js:13"
        },
        {
            "message": "Missing item type\nParses the event string into an object\nwith evetn name, method and arguments for the method.\n\nevent=>method: arg1, arg2",
            "line": " src/bbmv/directives/on.js:38"
        },
        {
            "message": "Missing item type\nSets an event listener that tries to invoke\na method either on the $el or on the bbmv view instance.",
            "line": " src/bbmv/directives/on.js:60"
        },
        {
            "message": "Missing item type\nEvent directive, binds events to actions on the view.",
            "line": " src/bbmv/directives/on.js:81"
        },
        {
            "message": "Missing item type\nintercept only filling for checkboxes and radios\nas the default jquery .val() method sets the checkboxes and radio input\nvalues instead of checking them (if the value is not passed in as an array)",
            "line": " src/bbmv/methods/jquery/extensions/value.js:79"
        },
        {
            "message": "Missing item type\nTakes variable number of arguments\nEach argument before the last is a 'condition->method' pair.\nIf no '->' is found within the pair string, we assume the method is\nto be used in default cases.",
            "line": " src/bbmv/methods/if.js:49"
        },
        {
            "message": "Missing item type\nAttempts to get the pipe id from the $dest object\nand then checks for a pipe in cache.\n\nIf no pipe is found in cache, instantiate a pipe\nset id onto $dest using the .data method\nand save pipe to cache using that id.",
            "line": " src/bbmv/methods/pipe.js:6"
        },
        {
            "message": "Missing item type\nPump data.",
            "line": " src/bbmv/methods/pipe.js:58"
        },
        {
            "message": "Missing item type\nDrains data from a single element",
            "line": " src/bbmv/methods/pipe.js:74"
        },
        {
            "message": "Missing item type\nGet from the jquery object",
            "line": " src/bbmv/pipe/dest-get.js:16"
        },
        {
            "message": "Missing item type\n[destSetSingle description]",
            "line": " src/bbmv/pipe/dest-set.js:12"
        },
        {
            "message": "Missing item type\nSet to the jquery object",
            "line": " src/bbmv/pipe/dest-set.js:63"
        },
        {
            "message": "Missing item type\nThe attribute used to store the pipe id\nonto the $dest elements.",
            "line": " src/bbmv.js:39"
        },
        {
            "message": "Missing item type\nEvent to listen on the model.",
            "line": " src/bbmv.js:64"
        },
        {
            "message": "Missing item type\nData atttribute for the binding event name.",
            "line": " src/bbmv.js:70"
        },
        {
            "message": "Missing item type\nDirective namespace\nused for bbdv.",
            "line": " src/bbmv.js:80"
        },
        {
            "message": "Missing item type\nBuilds the selector to get the elements to be\nin the directive view.\n\nIf the binding attribute is set, use it to build\na custom selector.\nOtherwise. use the data-prefix selector.",
            "line": " src/bbmv.js:86"
        }
    ]
}